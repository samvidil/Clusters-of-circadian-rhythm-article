# The next code can be use to reproduce the tables and figures of the article: 
# "Circadian rhythm profiles derived from accelerometer measures of the sleep-wake cycle in 2 cohort studies"
# We provide a code for which we already have the data about metrics and covariates ready. For some of the covariates we do some mananging to provide the good format in the analyses.

# Libraries
# If you do not have the librairy, do: install.packages("name_package_for_library")
library(haven)
library(corrplot)
library(tidyverse)
library(nnet)
library(questionr)
library(factoextra)
library(compareC)
library(cluster)
library(clusterSim)


#####################
### Main analyses ###
#####################


### Figure 1. Correlation matrix of 36 metrics reflecting circadian rhythm dimensions (rest-activity rhythm, daytime activity, sleep, and chronotype) ###

# Loading the data with the 36 metrics and the factors needed
Data <- read_dta("path/name.dta")
Data_F1 <- Data[, 70:105] # selection of metrics needed
colnames(Data_F1) <- c("SB duration", "Number of SB bouts", "Mean duration of SB bouts", "TPar,d", "LIPA duration", "MVPA duration", "Number of LIPA bouts", "Number of MVPA bouts", "Mean duration of LIPA bouts", "Mean duration of MVPA bouts", "TPra,d", "M10 mean acceleration", "Acceleration during waking", "IG intercept", "IG slope",
                       "Relative amplitude", "Cosinor mesor", "Cosinor amplitude", "Cosinor RÂ²", "IS", "IV",
                       "Sleep onset", "Waking time", "M10 start", "L5 start", "Cosinor acrotime",
                       "Sleep duration", "Sleep efficiency", "Mean duration of sleep bouts", "TPws,n", "Mean acceleration during sleep", "Number of sleep bouts", "L5 mean acceleration", "TPsw,n", "WASO", "Mean duration of wake bouts")
corrplot(cor(Data_F1[, c(16:21, 1:15, 27:36, 22:26)], method = "pearson"), 
         type = "lower",                                                   # To get the figure at bottom left (can be 'full' or 'upper')
         method = "square",                                                # To get the form square inside boxes (can be 'circle' or other)
         tl.pos = "l", 
         tl.col = "black", 
         tl.cex = 0.7)                                                     # To remove the names on the diagonal


# "addCoef.col = 'black', number.cex = 0.7" can be added to have the coefficient. Here we have too many metrics, and adding that would yield to unreadable figure.

# To save the plot
svg("path/corr_WII.svg")
corrplot(cor(Data_F1[, c(16:21, 1:15, 27:36, 22:26)], method = "pearson"), type = "lower", method = "square", tl.pos = "l", tl.col = "black", tl.cex = 0.7) 
dev.off()



### Figure 2. Standardized mean scores on 36 metrics as a function of nine circadian rhythm clusters in the Whitehall II accelerometer sub-study ###

# Step 1: PCA  
Data_F2 <- Data[, c(70:105)]
# Standardization
Data_F2_Z <- scale(Data_F2)
# PCA
PCA_results <- prcomp(Data_F2_Z)
data_dimensions <- data.frame(PCA_results$x[, 1:8]) # Keep dimensions with eigenvalue >=1

# Step 2: K-means  
# K-means clustering
CL <- list()
for(i in 4:12){
  CL[[i]] <-  kmeans(data_dimensions,       
                     centers = i,           # Number of k cluster tested
                     algorithm = "Lloyd",   
                     nstart = 5000,         # Number of different random starts tested
                     iter.max = 10000)      # Number of iterations maximum
}

# Visualisation
Data$c9_order  <- (Data$c9 == 5) + 2*(Data$c9 == 7) + 3*(Data$c9 == 1) + 4*(Data$c9 == 4) + 5*(Data$c9 == 8) + 6*(Data$c9 == 3) + 7*(Data$c9 == 6) + 8*(Data$c9 == 2) + 9*(Data$c9 == 9) # Right order for visualization
T9 <- data.frame(scale(Data[, 70:105]), c9 = Data$c9_order) %>%  # c9 corresponds to CL[[9]]$cluster saved in the data
  group_by(c9) %>%
  summarise_all(funs(mean))
T9_longer <- T9 %>% pivot_longer(!c9, names_to = "Metrics", values_to = "Z_score")
T9_longer <- T9_longer %>% 
  mutate(lab = "NULL") %>%
  mutate(lab = ifelse(c9 == 1, "Cluster 1\n\nRAR ++\nPA ++\n\n\nN = 501", lab),          
         lab = ifelse(c9 == 2, "Cluster 2\n\nRAR +\nLIPA +\nSleep -\n\nN = 587", lab),
         lab = ifelse(c9 == 3, "Cluster 3\n\nRAR +\nLIPA +\nSleep +\n\nN = 626", lab),
         lab = ifelse(c9 == 4, "Cluster 4\n\n\nMVPA ++\n\n\nN = 379", lab),
         lab = ifelse(c9 == 5, "Cluster 5\n\nRAR -\nLate\nChronotype\n\nN = 333", lab),
         lab = ifelse(c9 == 6, "Cluster 6\n\nRAR -\nPA -\nSleep +\n\nN = 705", lab),
         lab = ifelse(c9 == 7, "Cluster 7\n\nRAR -\nPA -\nSleep --\n\nN = 366", lab),
         lab = ifelse(c9 == 8, "Cluster 8\n\nRAR -\nPA +\nRestless sleep\n\nN = 234", lab),
         lab = ifelse(c9 == 9, "Cluster 9\n\nRAR --\nPA --\n\n\nN = 260", lab)) %>%
  mutate(Dimension = "NULL") %>%
  mutate(Dimension = ifelse(Metrics == "sbduration" | Metrics == "lipaduration" | Metrics == "mvpaduration" | Metrics == "numberofboutsinsb" | Metrics == "numberofboutsinlipa" | Metrics == "numberofboutsinmvpa" | Metrics == "meandurationsbbouts" | Metrics == "meandurationlipabouts" | Metrics == "meandurationmvpabouts" | Metrics == "m10value" | Metrics == "tpard" | Metrics == "tprad" | Metrics == "meanaccelerationduringwaking" | Metrics == "igintercept" | Metrics == "igslope",
                            "Daytime\nActivity", Dimension),
         Dimension = ifelse(Metrics == "is" | Metrics == "iv" | Metrics == "cosinormesor" | Metrics == "cosinoramplitude"| Metrics == "relativeamplitude" | Metrics == "cosinorr2",
                            "RAR", Dimension),
         Dimension = ifelse(Metrics == "sleeponset" | Metrics == "sleepoffset" | Metrics == "m10timing" | Metrics == "l5timing" | Metrics == "cosinoracrotime", 
                            "Chronotype", Dimension),
         Dimension = ifelse(Metrics == "durationsleep" | Metrics == "sleepefficiency" | Metrics == "accelerationduringsleep" | Metrics == "numbersleepbouts" | Metrics == "durationsleepbouts" | Metrics == "l5value" | Metrics == "tpwsn" | Metrics == "tpswn" | Metrics == "durationwake" | Metrics == "durationwakebouts",
                            "Sleep", Dimension)) %>%
  mutate(Dimension = factor(Dimension, levels = c("RAR", "Daytime\nActivity", "Sleep", "Chronotype"))) %>%
  mutate(Varname2 = "NULL") %>%
  mutate(Varname2 = ifelse(Metrics == "meanaccelerationduringwaking", "Acceleration during waking", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "lipaduration", "LIPA duration", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "mvpaduration", "MVPA duration", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "numberofboutsinlipa", "Number of LIPA bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "numberofboutsinmvpa", "Number of MVPA bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "meandurationlipabouts", "Mean duration of LIPA bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "meandurationmvpabouts", "Mean duration of MVPA bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "m10value", "M10 mean acceleration", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "relativeamplitude", "Relative Amplitude", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "tprad", "TPra,d", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "tpard", "TPar,d", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "sbduration", "SB duration", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "numberofboutsinsb", "Number of SB bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "meandurationsbbouts", "Mean duration of SB bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "igintercept", "IG intercept", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "igslope", "IG slope", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "iv", "Intradaily variability (IV)", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "is", "Interdaily stability (IS)", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "sleeponset", "Sleep onset", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "sleepoffset", "Waking time", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "m10timing", "M10 start", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "l5timing", "L5 start", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "cosinoracrotime", "Cosinor acrotime", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "cosinormesor", "Cosinor mesor", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "cosinoramplitude", "Cosinor amplitude", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "cosinorr2", "Cosinor R2", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "durationsleep", "Sleep duration", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "sleepefficiency", "Sleep efficiency", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "tpwsn", "TPws,n", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "durationsleepbouts", "Mean duration of sleep bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "numbersleepbouts", "Number of sleep bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "accelerationduringsleep", "Mean acceleration during sleep", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "l5value", "L5 mean acceleration", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "durationwake", "WASO", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "durationwakebouts", "Mean duration of wake bouts", Varname2)) %>%
  mutate(Varname2 = ifelse(Metrics == "tpswn", "TPsw,n", Varname2)) %>%
  mutate(Varname2 = factor(Varname2, levels = rev(c("SB duration", "Number of SB bouts", "Mean duration of SB bouts","TPar,d","LIPA duration","MVPA duration","Number of LIPA bouts","Number of MVPA bouts","Mean duration of LIPA bouts","Mean duration of MVPA bouts", "TPra,d","M10 mean acceleration","Acceleration during waking", "IG intercept", "IG slope",
                                                    "Relative Amplitude","Cosinor mesor","Cosinor amplitude", "Cosinor R2", "Interdaily stability (IS)", "Intradaily variability (IV)",
                                                    "Sleep onset", "Waking time", "M10 start", "L5 start", "Cosinor acrotime", 
                                                    "Sleep duration", "Sleep efficiency", "Mean duration of sleep bouts", "TPws,n", "Mean acceleration during sleep", "Number of sleep bouts", "L5 mean acceleration", "TPsw,n", "WASO", "Mean duration of wake bouts"))))

# Plot
(cluster_WII <- ggplot(data = T9_longer, aes(y = Varname2, x = Z_score, fill = Dimension)) +
  facet_grid(Dimension ~ lab, scales = "free", space = "free") + 
  theme_bw() +
  theme(panel.grid = element_blank(), legend.position = "none", strip.text.y = element_text(angle = 0), axis.text = element_text(size = 15),
        axis.title = element_text(size = 20), strip.text = element_text(size = 15)) +
  labs(x = "z-score", y = "")  +
  geom_vline(xintercept = 0, color = "grey") +
  geom_vline(xintercept = c(-1, 1), color = "grey", lty = 2) +
  geom_vline(xintercept = c(-2, 2), color = "grey", lty = 3) +
  geom_col(position = position_dodge2())  +
  scale_fill_manual(values = 	c("#586e75", "#839496", "#D2D2D2", "#657b83")))

#ggsave("path/figure_2.svg", cluster_WII, width = 500, height = 300, units = "mm")
# To save the figure



### Table 1. Characteristics of participants as a function of nine circadian rhythm clusters in the Whitehall II accelerometer sub-study ###

# The next lines correspond to creation of the covariates we need. It is specific to our covariates and what we already have for it.
Data$ALCOHOL <- 3 - 3*(Data$falcohol == 0) - 2*(Data$falcohol > 0 & Data$falcohol < 14) - (Data$falcohol >= 14)
Data$FRUVEG  <- (Data$ffruitvg_i == 1 | Data$ffruitvg_i == 2 | Data$ffruitvg_i == 3 | Data$ffruitvg_i == 4 | Data$ffruitvg_i == 5 | Data$ffruitvg_i == 6) + 2*(Data$ffruitvg_i == 7) + 3*(Data$ffruitvg_i == 8 | Data$ffruitvg_i == 9)

Data$edu          <- as.character(Data$edu)
Data$fstatusx_i   <- as.character(Data$fstatusx_i)
Data$sex          <- as.character(Data$sex)
Data$ethn_ds      <- as.character(Data$ethn_ds)
Data$fesmoke_i    <- as.character(Data$fesmoke_i)  
Data$ALCOHOL      <- as.character(Data$ALCOHOL)
Data$FRUVEG       <- as.character(Data$FRUVEG)

# Work status
Data$WORK <- (2*(Data$flabstat == 1| Data$flabstat == 2)) + (Data$flabstat != 1 & Data$flabstat != 2) - 1

# Season
Data$SEASON <- 0
for(i in 1:length(Data$fdatscrn_i)){
  if(Data$fdatscrn_i[i] < "2012-03-20") Data$SEASON[i] <- "Winter"
  if(Data$fdatscrn_i[i] >= "2012-03-20" & Data$fdatscrn_i[i] < "2012-06-21") Data$SEASON[i] <- "Spring"
  if(Data$fdatscrn_i[i] >= "2012-06-21" & Data$fdatscrn_i[i] < "2012-09-22") Data$SEASON[i] <- "Summer"
  if(Data$fdatscrn_i[i] >= "2012-09-22" & Data$fdatscrn_i[i] < "2012-12-21") Data$SEASON[i] <- "Autumn"
  if(Data$fdatscrn_i[i] >= "2012-12-21" & Data$fdatscrn_i[i] < "2013-03-20") Data$SEASON[i] <- "Winter"
  if(Data$fdatscrn_i[i] >= "2013-03-20") Data$SEASON[i] <- "Spring"
}

# Hyperlipidaemia
Data$LDL <- NULL
for(i in 1:length(Data$pc1)){
  Data$LDL[i] <- Data$fldl[i]
  if(is.na(Data$LDL[i]) == TRUE) Data$LDL[i] <- Data$jldl[i]
  if(is.na(Data$LDL[i]) == TRUE) Data$LDL[i] <- Data$mldl[i]
  if(is.na(Data$LDL[i]) == TRUE) Data$LDL[i] <- Data$tldl[i]
  if(is.na(Data$LDL[i]) == TRUE) Data$LDL[i] <- Data$xldl[i]
}
Data$HYPLIP <- as.numeric(Data$LDL > 4.1 | Data$flipdrg == 1)
# Deprivation index
Data$area_living <- scale(Data$fimd_sc)


### For the table 1 ###
Data_cov <- Data[(is.na(Data$ethn_ds) == FALSE) & (is.na(Data$HYPLIP) == FALSE) & (is.na(Data$area_living) == FALSE), ] # 3,965 and removed & (is.na(Data$adl_new) == FALSE) 
# For categorical variables (example of sex)
Data_cov %>%
  group_by(c9_order, sex) %>%
  summarise(N = n(), .groups = "drop") %>%
  group_by(c9_order) %>%
  mutate(Percentage = round(100 * N / sum(N), 1)) %>%
  arrange(c9_order, sex)

# For continuous variables (example of age)
Data_cov %>%
  group_by(c9_order) %>%
  summarise(
    Mean = mean(fage_si, na.rm = TRUE),
    SD = sd(fage_si, na.rm = TRUE),
    n = n()
  )



## Table 3. Association (Odds Ratio (95% CI)) of socio-demographic, seasonal, behavioural, and health-related factors with circadian rhythm clusters in the Whitehall II accelerometer sub-study.c9 == 9) ### 

# Covariates managing (again specific)
Data_cov$LUX_prop_sup1000_day2 <- (100 * Data_cov$LUX_prop_sup1000_day) / 5 
Data_cov$age2 <- Data_cov$fage_si / 5
Data_cov$BMI5 <- Data_cov$fbmi_i / 5
Data_cov$NBCHDIcat <- Data_cov$NBCHDI
for(i in 1:length(Data_cov$NBCHDI)){
  if(Data_cov$NBCHDIcat[i] >= 1) Data_cov$NBCHDIcat[i] <- 1
}
Data_cov$light_season <- NULL
for(i in 1:length(Data_cov$pc1)){
  if(Data_cov$SEASON[i] == "Autumn") Data_cov$light_season[i] <- (Data_cov$LUX_prop_sup1000_day2[i] - mean(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Autumn"])) / sd(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Autumn"])
  if(Data_cov$SEASON[i] == "Winter") Data_cov$light_season[i] <- (Data_cov$LUX_prop_sup1000_day2[i] - mean(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Winter"])) / sd(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Winter"])
  if(Data_cov$SEASON[i] == "Spring") Data_cov$light_season[i] <- (Data_cov$LUX_prop_sup1000_day2[i] - mean(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Spring"])) / sd(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Spring"])
  if(Data_cov$SEASON[i] == "Summer") Data_cov$light_season[i] <- (Data_cov$LUX_prop_sup1000_day2[i] - mean(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Summer"])) / sd(Data_cov$LUX_prop_sup1000_day2[Data_cov$SEASON == "Summer"])
}
# Standartdization according to the season of wearing

Data_cov$area_living_ter <- (Data_cov$area_living < quantile(Data_cov$area_living, c(1/3, 2/3))[1]) +
  2*(Data_cov$area_living >= quantile(Data_cov$area_living, c(1/3, 2/3))[1] & Data_cov$area_living < quantile(Data_cov$area_living, c(1/3, 2/3))[2]) +
  3*(Data_cov$area_living >= quantile(Data_cov$area_living, c(1/3, 2/3))[2])

### Multinomial model ###
Data_cov$c9_order <- relevel(as.factor(Data_cov$c9_order), ref = 3)
mod_mult <- multinom(c9_order ~ age2 + sex + ethn_ds + (edu<2) + (fstatusx_i!=1) + WORK + SEASON + as.character(area_living_ter) +
                       fesmoke_i + ALCOHOL + (FRUVEG<2) + light_season +
                       BMI5 + DIABETES_p + HYPTEN_p + HYPLIP +
                       as.character(NBCHDIcat) + fcnsdrg_i, data = Data_cov, maxit = 200)
res_mod_mult <- data.frame(odds.ratio(mod_mult))
# Results
round(res_mod_mult, 3)



### C-index analyses ###
Data_allRAR <- scale(Data[, c(81, 85:87, 89:90, 93:95, 102)])
PCA_results_allRAR <- prcomp(Data_allRAR)
# Table S2
round(get_eigenvalue(PCA_results_allRAR), 1)
# Table S3
round(PCA_results_allRAR$rotation, 2)
# Time to mortality or censure
Data$time_mort <- (Data$mort_date - Data$fdatscrn_i) / 365.25
# Values for dimensions retained
Data$pc1_allRAR <- PCA_results_allRAR$x[, 1]
Data$pc2_allRAR <- PCA_results_allRAR$x[, 2]
Data$pc3_allRAR <- PCA_results_allRAR$x[, 3]

# Cox model
mod1_mort <- coxph(Surv(time_mort, mort) ~ pc1_allRAR + pc2_allRAR + pc3_allRAR, data = Data[Data$mort != 3, ])
cox.zph(mod1_mort) 
summary(mod1_mort)
mod2_mort <- coxph(Surv(time_mort, mort) ~ pc1 + pc2 + pc3 + pc4 + pc5 + pc6 + pc7 + pc8, data = Data[Data$mort != 3, ])
cox.zph(mod2_mort) 
summary(mod2_mort)

# Confidence interval
mod1_mort$concordance[6] - 1.96*(mod1_mort$concordance[7])
mod1_mort$concordance[6] + 1.96*(mod1_mort$concordance[7])

mod2_mort$concordance[6] - 1.96*(mod2_mort$concordance[7])
mod2_mort$concordance[6] + 1.96*(mod2_mort$concordance[7])

# Test for difference
score1 <- predict(mod1_mort, type = "lp")
score2 <- predict(mod2_mort, type = "lp")
compareC_wii <- compareC(timeX   = Data$time_mort[Data$mort != 3],
                         statusX = Data$mort[Data$mort != 3],
                         scoreY  = score1,
                         scoreZ  = score2)


#####################
### Supplementary ###
#####################

### Table S4. Principal component analyses: selection of the retained principal components ###

round(get_eigenvalue(PCA_results)[1:10, ], 2)   


### Table S5. Factors loadings of the eight principal components retained in the analysis in the Whitehall II accelerometer sub-study ###

data.frame(round(PCA_results$rotation[c(16:21, 1:15, 27:36, 22:26), 1:8], 2))


### Table S7. Unstandardized mean (standard deviation) scores and ranking of each metric across the circadian rhythm clusters in the Whitehall II accelerometer sub-study ###

# Mean and SD (example for relative amplitude)
Data %>%
  group_by(c9_order) %>%
  summarise(
    Mean = mean(relativeamplitude, na.rm = TRUE),
    SD = sd(relativeamplitude, na.rm = TRUE),
    n = n()
  )
# Test
by(Data$relativeamplitude, Data$c9_order, shapiro.test) # test normality
leveneTest(relativeamplitude ~ as.factor(c9_order), data = Data)   # test variance
# Non parametric test
summary(kw_comp. <- nparcomp::nparcomp(data = Data, relativeamplitude ~ c9_order))
kw_comp.$Analysis  
plot(kw_comp.)
# With the two last commands, there are the significant differences between cluster and from that, you can create an order rank



### Figure S4. Statistical criteria results for the clustering in Whitehall II ###

# Within cluster sum of square
n <- dim(data_dimensions)[1]
wss <- c()
wss[1] <- (n - 1) * sum(apply(data_dimensions, 2, var))
wss[2] <- kmeans(data_dimensions, centers = 2, algorithm = "Lloyd", nstart = 5000, iter.max = 10000)$tot.withinss
wss[3] <- kmeans(data_dimensions, centers = 3, algorithm = "Lloyd", nstart = 5000, iter.max = 10000)$tot.withinss
for(k in 4:12){
  wss[k] <- CL[[k]]$tot.withinss   
}
plot(1:12, wss, xlab = expression(k), ylab = expression(WCSS), type = "b", lwd = 2)


# Silhouette index
dist_matrix <- dist(data_dimensions, method = "euclidean")
silhouette <- c()
for(i in 1:9){
  silhouette[i]  <- summary(silhouette(x = CL[[i]]$cluster, 
                                       k = i,  
                                       dist = dist_matrix))$avg.width
}

plot(x = 1:9, y = silhouette,
     lwd = 2, type = "b",
     xlab = "k", ylab = "Silhouette coefficient", 
     xaxt = "n"); axis(1, at = 1:9, labels = 4:12)


# Davies-Bouldin index
row.names(data_dimensions) <- NULL
y_db <- c()
for(i in 1:9){
  y_db[i] <- index.DB(as.matrix(data_dimensions), 
                      CL[[i]]$cluster, 
                      "centroids")$DB
}
plot(x = c(1:9), y = y_db, 
     lwd = 2, 
     type = "b", 
     xlab = "k", ylab = "DB", 
     xaxt = "n"); 
axis(1, at = 1:9, labels = 4:12)


### Figure S6. Illustration of acceleration signals for typical profiles for the nine clusters identified in the Whitehall II accelerometer sub-study ###

# For each cluster we follow the next code
load(file = "//path/file.bin.RData")
M1 = M

# M1$metashort$timestamp[706] # Use to identify timing for x axis

# Plot
plot(1:length(M1$metashort$ENMO), M1$metashort$ENMO*1000, 
     ylab="", xlab = " ", main="Cluster name", 
     type = "l", xaxt = "n", 
     cex.axis = 1.2, cex.lab = 1.4, cex.main = 1.7, 
     ylim = c(0, 600)) 
abline(h = 40, lty = 2, col = "orange", lwd = 2)                                 # LIPA threshold
abline(h = 100, lty = 2, col = 'green', lwd = 2)                                 # MVPA threshold
abline(v = seq(706, 12226, by = 1440), lty = 3, col = "grey", lwd = 1.7)         # Lines for the timing landmarks
axis(1, seq(706, 12226, by = 720),
     labels = c("00:00", "", "00:00", "", "00:00", "", "00:00", "", "00:00", "", "00:00", "", "00:00", "", "00:00", "", "00:00"), cex.axis = 0.905)

